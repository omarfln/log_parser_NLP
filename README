This project is a stater project for smart log analysis based on machine learning using an NLP (Natural Language Processing) solution with RL (Reinforcement learning) to analyze build, simulation and lint logs generated by EDA tools like VCS by Synopsys Inc. 
The purpose of this project to train the moduke over some common build, sim and lint issues, then the mosule is capable to categorize any new (not part of the training dataset) failure and suggest a fix
The categorization and fix suggestion are all in human readble language (English only)

Features
1- Detect Common Build & Simulation Errors (Make, Vivado, Verilator, GCC, etc.)
2- Auto-Suggest Fixes using a fine-tuned T5 model
3- Supports Unknown Failures with a similarity-based search
4- Uses TF-IDF & NLP to match errors to past failures
5- Beam Search Optimization to generate human-readable fixes

Under the hood:
1- Preprocesses error logs by tokenizing and vectorizing them.
2️- Categorizes errors using TF-IDF & DBSCAN clustering.
3️- Fine-tunes a T5 model on a dataset of errors and their fixes.
️4- Generates meaningful fixes using beam search instead of random sampling.
5- Detects new errors and suggests the most likely fix.

To exeute the module you may run it on top of Google colab. The trainig dataset provided is slightly small, i.e. need more trainig dataset
Demo on Google colab: https://colab.research.google.com/drive/1zFA1IN2ExuPzcP8Ehi0nAabBJWUJDlMQ?usp=sharing


Sample of training dataset:
 [
        {"error": "make: *** Compilation failed", "fix": "Check for syntax errors. Ensure all object files are built before linking."},
        {"error": "Vivado synthesis error: missing net in design", "fix": "Ensure all ports are correctly declared and connected in the RTL module."},
        {"error": "Verilator fatal error: Cannot resolve signal 'rst'", "fix": "Verify that 'rst' is properly declared as an input in all module instances."},
        {"error": "ToolX: Unexpected segmentation fault in simulation", "fix": "Check for uninitialized variables and out-of-bounds errors in your simulation code."}
    ]

Sample of output over new failues:
Failure found:
New Log: make: *** [all] Error 1
Similar Failure: make: *** Compilation failed
Suggested Fix: Check for syntax errors. Ensure all object files are built before linking.

Failure found:
New Log: # ** Error: (vlog-7033) Unresolved reference to 'rst' in module 'top_module'
Similar Failure: Verilator fatal error: Cannot resolve signal 'rst'
Suggested Fix: # (vlog-7033) Unresolved reference to 'rst' in module 'top_module'


Note how the module was capable to categorize the new failures (make: *** [all] Error 1) and (# ** Error: (vlog-7033) Unresolved reference to 'rst' in module 'top_module') into the correct categorize
(Similar Failure: make: *** Compilation failed) and (Similar Failure: Verilator fatal error: Cannot resolve signal 'rst)
With fix suggestion  (Suggested Fix: Check for syntax errors. Ensure all object files are built before linking.)  and (Suggested Fix: # (vlog-7033) Unresolved reference to 'rst' in module 'top_module')
